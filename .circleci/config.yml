version: "2.1"
orbs:
  slack: circleci/slack@4.12.0
  docker: circleci/docker@2.2.0
  aws-cli: circleci/aws-cli@3.1.4
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3.1
  aws-ecr: circleci/aws-ecr@6.7.0

executors:
  docker-ex:
    docker:
      - image: cimg/base:stable
  python:
    docker:
      - image: cimg/python:3.10-browsers

jobs:
  say-hello:
    executor: docker-ex
    steps:
      - checkout
      - run:
          name: "Hello, World!"
          command: |
            echo 'Hello, World!'
      - slack/notify:
          event: pass
          template: basic_success_1
      - slack/notify:
          event: fail
          template: basic_fail_1

  # build-image:
  #   executor: docker/machine
  #   steps:
  #     - checkout
  #     - docker/check
  #     - docker/build:
  #         image: ${DOCKER_LOGIN}/${DOCKER_IMG}
  build-push-image:
    - aws-ecr/build-and-push-image:
        account-url: ${AWS_ECR_ACCOUNT_URL}
        aws-access-key-id: ${AWS_ACCESS_KEY_ID}
        aws-secret-access-key: ${AWS_SECRET_ACCESS_KEY}
        create-repo: true
        dockerfile: Dockerfile
        path: .
        region: ${AWS_DEFAULT_REGION}
        repo: circleci-ecr-orb-demo
        tag: "$CIRCLE_SHA1"

  create-cluster:
    executor: docker-ex
    steps:
      - aws-cli/install
      - aws-cli/setup
      - aws-eks/setup
      - kubernetes/install-kubectl:
          kubectl-version: "v1.21.13"
      - run:
          name: "Creating cluster"
          command: |
            echo 'Pre-check before creating...'
            aws eks describe-cluster --name ${EKS_CLUSTER_NAME}
            if [ $? -ne 0 ]; then
              echo 'Cluster not found. Creating new cluster...'
              eksctl create cluster --name ${EKS_CLUSTER_NAME} --nodes 3 --nodes-min 1 --nodes-max 5 --region ${AWS_REGION}
            else
              echo 'Cluster existed. Skiping...'
            fi
           
  k8s-deployment:
    executor: docker-ex
    steps:
      - checkout
      - kubernetes/install-kubectl:
          kubectl-version: "v1.21.13"
      - aws-eks/update-kubeconfig-with-authenticator:
          kubectl-version: "v1.21.13"
          cluster-name: ${EKS_CLUSTER_NAME}
          aws-region: ${AWS_DEFAULT_REGION}
      - kubernetes/create-or-update-resource:
          resource-file-path: k8s.yml
          show-kubectl-command: true
          get-rollout-status: true
          resource-name: deployment/capstone-project-deployment
      - run:
          name: "Check the nodes"
          command: |
            kubectl get nodes
      - run:
          name: "Check the deployments"
          command: |
            kubectl get deployments
      - run:
          name: "Check the pods"
          command: |
            kubectl get pods -o wide
      - run:
          name: "Check the service"
          command: |
            kubectl get service/capstone-project-service
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
          step_name: "k8s-deployment"
      - slack/notify:
          event: fail
          template: basic_fail_1
          step_name: "k8s-deployment"

  check-health:
    executor: docker-ex
    steps:
      - kubernetes/install-kubectl:
          kubectl-version: "v1.21.13"
      - aws-eks/update-kubeconfig-with-authenticator:
          kubectl-version: "v1.21.13"
          cluster-name: ${EKS_CLUSTER_NAME}
          aws-region: ${AWS_DEFAULT_REGION}
      - run:
          name: "Curl to service to check for health"
          command: |
            SVC_HOSTNAME=$(kubectl get service/capstone-project-service -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
            curl $SVC_HOSTNAME
      - slack/notify:
          event: pass
          template: basic_success_1
          step_name: "check-health"
      - slack/notify:
          event: fail
          template: basic_fail_1
          step_name: "check-health"

  get-rolling-status:
    executor: docker-ex
    steps:
      - kubernetes/install-kubectl:
          kubectl-version: "v1.21.13"
      - aws-eks/update-kubeconfig-with-authenticator:
          kubectl-version: "v1.21.13"
          cluster-name: ${EKS_CLUSTER_NAME}
          aws-region: ${AWS_DEFAULT_REGION}
      - kubernetes/get-rollout-status:
          show-kubectl-command: true
          resource-name: deployment/capstone-project-deployment
      - slack/notify:
          event: pass
          template: basic_success_1
          step_name: "get-rolling-status"
      - slack/notify:
          event: fail
          template: basic_fail_1
          step_name: "get-rolling-status"

  delete-cluster:
    executor: docker-ex
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          kubectl-version: "v1.21.13"
          cluster-name: ${EKS_CLUSTER_NAME}
          aws-region: ${AWS_DEFAULT_REGION}
      - aws-eks/delete-cluster:
          cluster-name: ${EKS_CLUSTER_NAME}
          aws-region: ${AWS_DEFAULT_REGION}
          show-eksctl-command: true
      - slack/notify:
          event: pass
          template: basic_success_1
          step_name: "delete-cluster"
      - slack/notify:
          event: fail
          template: basic_fail_1
          step_name: "delete-cluster"

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  default:
    jobs:
      - say-hello
      - docker/hadolint:
          dockerfiles: Dockerfile
          hadolint-tag: 2.2.0-debian
          attach-workspace: true
      # - build-image:
      #     requires: [docker/hadolint]
      # - docker/publish:
      #     requires: [build-image]
      #     image: ${DOCKER_LOGIN}/${DOCKER_IMG}
      #     tag: "latest,${CIRCLE_SHA1}"
      #     update-description: true
      - build-push-image
      - create-cluster
      - k8s-deployment:
          requires: [docker/publish, create-cluster]
      - check-health:
          requires: [k8s-deployment]
      - get-rolling-status:
          requires: [k8s-deployment]
      - hold:
          type: approval
          requires: [k8s-deployment]
      - delete-cluster:
          requires: [hold]
